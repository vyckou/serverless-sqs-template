service: ${env:CONTEXT}

# enables sqs as DLQ for lambdas
plugins:
  - serverless-plugin-lambda-dead-letter

custom:
    context: ${env:CONTEXT}
    service: ${env:SERVICE}
    environment: ${env:ENVIRONMENT}
    aws_accountid: ${env:AWS_ACCOUNTID}
    deployment_bucket: ${env:SERVERLESS_DEPLOYMENT_BUCKET}
    lambda_name: ${env:CONTEXT}-${env:SERVICE}-${env:ENVIRONMENT}  

provider:
  name: aws
  runtime: python3.6
  region: eu-west-1
  stage: ${opt:stage, 'staging'}
  deploymentBucket:
    name: ${self:custom.deployment_bucket}
    serverSideEncryption: AES256
  role: arn:aws:iam::${self:custom.aws_accountid}:role/context/${self:custom.context}-${self:custom.environment}    
  tags:
    context: ${self:custom.context}
    service: ${self:custom.service}
    stack: ${self:custom.service}

functions:
  lambdafunction1:
    name: ${self:custom.lambda_name}
    handler: resources/lambda.handler
    description: <add description here>
    memorySize: 128
    timeout: 10
    reservedConcurrency: 5
    deadLetter:
      sqs:  ${self:custom.context}-${self:custom.service}deadletter-${self:custom.environment}
    environment:
      varA: varA
    events:      
#      - sqs:      
#          arn: arn:aws:sqs:eu-west-1:${self:custom.aws_accountid}:${self:custom.context}-${self:custom.service}outbound-${self:custom.environment}    # created manually out of Cloudformation scope
#          batchSize: 1
      - sqs:
          arn:
            Fn::GetAtt:
            - Messagequeue1
            - Arn
          batchSize: 1

resources:
  Resources:
    Messagequeue1:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.context}-${self:custom.service}inbound-${self:custom.environment}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60
        Tags:
          - Key: context
            Value: ${self:custom.context}
          - Key: service
            Value: ${self:custom.service}
          - Key: stack
            Value: ${self:custom.environment}